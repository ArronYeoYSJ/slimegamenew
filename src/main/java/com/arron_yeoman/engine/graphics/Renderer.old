package com.arron_yeoman.engine.graphics;


import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL15;
import org.lwjgl.opengl.GL30;

import com.arron_yeoman.engine.Camera;
import com.arron_yeoman.engine.Window;
import com.arron_yeoman.engine.graphics.shapes.Rectangle;
import com.arron_yeoman.maths.Matrix4x4;
//import com.arron_yeoman.engine.gameobjects.GameObject;
//import com.arron_yeoman.engine.gameobjects.testobjects.PointLight;



public class Renderer {

    private Shader shader;
    private int texture;
    private Window window;
    public Matrix4x4 testProjectionMatrix;

    public Renderer(Window window, Shader shader) {
        System.out.println("Renderer created");
        this.shader = shader;
        this.window = window;
              
    }

    public void renderMesh(Rectangle gameObject, Camera camera) {

        texture = gameObject.getMesh().getTexture();
        GL30.glBindVertexArray(gameObject.getMesh().getVAO());
        GL30.glEnableVertexAttribArray(0); //position
        GL30.glEnableVertexAttribArray(1); //colour
        GL30.glEnableVertexAttribArray(2); //UV
        //GL30.glEnableVertexAttribArray(3);
        //@NOTE: use glUniform1i(glGetUniformLocation(program, "textureDataX"), X-1); to assign  specific texture units to uniforms when using multiple textures
        GL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, gameObject.getMesh().getIBO());
        GL15.glActiveTexture(GL15.GL_TEXTURE0);
        GL11.glBindTexture(GL30.GL_TEXTURE_2D, texture);
        shader.bind();
        //shader.setUniform("textureData", 0);
        //GL11.glTexParameteri(GL30.GL_TEXTURE_2D, GL30.GL_TEXTURE_WRAP_S, GL30.GL_CLAMP_TO_EDGE);
        //GL11.glTexParameteri(GL30.GL_TEXTURE_2D, GL30.GL_TEXTURE_WRAP_T, GL30.GL_CLAMP_TO_EDGE);
        
        
        //GL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, gameObject.getMesh().getCBO());

        
        //Matrix4x4.transform(gameObject.getPosition(), gameObject.getRotation(), gameObject.getScale()).logMatrix();
        shader.setUniform("model", Matrix4x4.transform(gameObject.getPosition(), gameObject.getRotation(), gameObject.getScale()));
        //shader.setUniform("projection", window.getProjectionMatrix());
        float[] orthoData = camera.getOrthoData();
        Matrix4x4 ortho = Matrix4x4.orthographic(orthoData[0], orthoData[1], orthoData[2], orthoData[3], orthoData[4], orthoData[5]);
        //ortho.logMatrix();
        shader.setUniform("projection", ortho);
        // //window.getProjectionMatrix().logMatrix();
        //shader.setUniform("view", Matrix4x4.view(camera.getPosition(), camera.getRotation()));
        Matrix4x4 viewMatrix = Matrix4x4.view(camera.getPosition(), new Vector4(camera.getRotation().x, camera.getRotation().y, 0f, 1.0f));
        //viewMatrix.logMatrix();
        shader.setUniform("view", viewMatrix);

        GL11.glDrawElements(GL11.GL_TRIANGLES, gameObject.getMesh().getIndices().length, GL11.GL_UNSIGNED_INT, 0);
        //System.out.println("indices length: " + gameObject.getMesh().getIndices().length);
        //cleanup

        shader.unbind();
        GL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, 0);
        GL15.glBindTexture(0, 0);
        GL15.glActiveTexture(0);
        GL30.glDisableVertexAttribArray(0);
        GL30.glDisableVertexAttribArray(1);
        GL30.glDisableVertexAttribArray(2);
        GL30.glDisableVertexAttribArray(3);
        GL30.glBindVertexArray(0);

    }
    public void setShader(Shader shader) {
        this.shader = shader;
    }
}
